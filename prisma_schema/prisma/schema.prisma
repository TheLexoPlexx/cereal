datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator client { //wird nicht mehr benötigt, da wir den Prisma-Client nicht mehr verwenden sondern sqlx in Rust
//   provider = "prisma-client-js"
// }

generator dbml {
  provider = "prisma-dbml-generator"
}

// https://dbdiagram.io/d

model Plant {
  id           String             @id @default(cuid())
  label        String             @unique
  parts        Serialnumberpart[]
  order_number Int
  order_list   Order              @relation(fields: [order_number], references: [order_number])

  @@map("plant")
}

model Serialnumberpart {
  serial  String @id
  part_id String
  part    Part   @relation(fields: [part_id], references: [part_number])

  // Zugehörigkeit zu einer Anlage
  plant    Plant?  @relation(fields: [plant_id], references: [id]) //Jedes Teil kann in einer Anlage verbaut sein, oder nicht
  plant_id String?

  // Baugruppe/Hierarchie:
  group     Serialnumberpart[] @relation("hierarchy") //wenn in Gruppe etwas eingetragen ist, dann ist es eine Baugruppe
  parent    Serialnumberpart?  @relation("hierarchy", fields: [parent_id], references: [serial])
  parent_id String?

  // Zeiten
  manufacturing_date Int?
  shipping_date      Int?
  installation_date  Int?

  @@map("serialnumberpart")
}

model Part {
  part_number      String             @id @unique //aus SAP
  // name              String //auch aus SAP, vielleicht Bezeichnung + interne Bezeichnung oder mit extra-Feld
  serialnumberpart Serialnumberpart[]

  @@map("part")
}

// ###################

model Project {
  id             String  @id @default(cuid())
  project_number Int     @unique
  factory        Factory @relation(fields: [id], references: [id])
  order_list     Order[]

  @@map("project")
}

model Order {
  order_number Int     @id
  project      Project @relation(fields: [project_id], references: [id])
  project_id   String
  plant_list   Plant[]

  @@map("order")
}

// ################### Kunde und Werk existiert, damit der GU übersprungen werden kann, trotzdem muss es ein Feld "GU" geben, damit getrackt werden kann, welcher von denen die meisten Probleme mit unseren Anlagen hat
model Final_Customer {
  id           String    @id @default(cuid())
  sap_id       String    @unique @default("0") // Anbindung an SAP, zu Entwicklungszwecken "0", das Feld ist absichtlich mit SAP benannt, damit hier nichts überschrieben werden muss beim Umzug auf IFS.
  factory_list Factory[]
  name         String    @unique
  alias        String[]

  @@map("final_customer")
}

model Prime_Contractor {
  id     String @id @default(cuid())
  sap_id String @unique @default("0") // Anbindung an SAP, zu Entwicklungszwecken "0"

  @@map("prime_contractor")
}

model Factory {
  id          String         @id @default(cuid())
  customer    Final_Customer @relation(fields: [customer_id], references: [id])
  customer_id String
  name        String         @unique
  projects    Project[]

  @@map("factory")
}
